---
// @ts-nocheck
const { info } = Astro.props;
const { index, slug, day, band, genre, stage, start, end, spotify, videos } = info;
const infoData = JSON.stringify(info);
import Details from "../Details/Details.astro";
import Link from "../Link/Link.astro";
import Image from "../Image/Image.astro";
import S from "./BandInfo.module.css";
const basePath = document.documentElement.dataset.base || '';
---

<article class={`${S["band-info"]} ${S[`_${stage}`]}`} data-info={infoData}>
  <h2 transition:name={`band-${slug}`} data-index={index} class={S._band}>{band}</h2>
  <h3 class={S["_info-title"]}>D√≠a <span class={S._day}>{day}</span></h1>
  <h3 class={S["_info-title"]}>Genero musical: <strong class={S._genre}>{genre}</strong></h3>
  <section class={S["_info-title"]}>
    <p transition:name={`hours-${slug}`}>Tocan en el escenario: <strong class={S._stage}>{stage}</strong></p>
  </section>
  <section class={S._time}>
    <p>Hora <span>{start} - {end}</span></p>
  </section>
  {spotify && spotify !== "#" && <section class={S._spotify}>
    <Link
      href={spotify}
      target="_blank"
      >
      <Image src={`${basePath}/img/spotify.png`} alt="Spotify" class={S._image} />
    </Link>
  </section>}
  {videos && (<section  class={S._videos}>
    {
      videos.map(({ id, title }) => (
        id && <Details id={id} title={title} />
      ))
    }
  </section>)}
  <button
    class={S.likeButton}
    data-index={index}
    data-day={day}
    id={`like-${index}`}
    data-button="like"
  >
    ‚ù§Ô∏è Like
  </button>

  <div class={S["_likes-container"]} data-container={index}>
    
  </div>
</article>

<script type="module">
  const firebaseModule = await import(`${basePath}/utils/firebase.js`);
  const { initFireBase, getData, getOnce, updateData } = firebaseModule;

  const db = initFireBase();
  const currentUser = localStorage.getItem("user");

  if (!currentUser) {
    window.location.href = `${basePath}/`;
  }

  const button = document.querySelector('[data-button="like"]');
  if (button) {
    let userHasLiked = false;
    const index = button.dataset.index;
    const day = button.dataset.day;
    const path = `data/${day}`;
    const likesContainer = document.querySelector(`[data-container="${index}"]`);

    function updateLikeUI(likes) {
      if (likes && likes.includes(currentUser)) {
        button.textContent = "üíî Ya no quiero verlo";
        userHasLiked = true;
      } else {
        button.textContent = "‚ù§Ô∏è ¬°Quiero verlo!";
        userHasLiked = false;
      }
      if (likesContainer) {
        if (likes && likes.length > 0) {
          likesContainer.innerHTML = `
            <p>Las siguientes personas quieren verlo:</p>
            ${likes
              .map(
                (user) => `<img src="${basePath}/fotos/${user}.jpg" alt="${user}" title="${user}" class="like-avatar" />`
              )
              .join("")}
          `;
        } else {
          likesContainer.innerHTML = "";
        }
      }
    }

    // Escucha en tiempo real los cambios de likes SOLO para la UI
    getData(db, path, (bandas) => {
      const banda = bandas.find((b) => String(b.index) === String(index));
      const likes = banda && banda.likes ? banda.likes : [];
      updateLikeUI(likes);
    });

    button.addEventListener("click", async (e) => {
      if (button.disabled) return;
      button.disabled = true;
      // Solo obtener una vez el estado actual antes de actualizar
      await getOnce(db, path, async (bandas) => {
        const banda = bandas.find((b) => String(b.index) === String(index));
        if (!banda) return;
        let likes = new Set(banda.likes || []);
        const hadLike = likes.has(currentUser);
        const updatePath = `${path}/${bandas.indexOf(banda)}`;
        if (hadLike) {
          likes.delete(currentUser);
          if (likes.size === 0) {
            await updateData(db, updatePath, { likes: null });
          } else {
            await updateData(db, updatePath, { likes: Array.from(likes) });
          }
        } else {
          likes.add(currentUser);
          await updateData(db, updatePath, { likes: Array.from(likes) });
        }
        button.disabled = false;
      });
    });
  }
</script>
